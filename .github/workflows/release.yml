name: 🚀 CI/CD Git Flow

on:
  # Triggers principais - Git Flow oriented
  push:
    branches: 
      - main           # Release final
      - develop        # Development beta
    tags:
      - 'v*'           # Tags criadas pelo git flow
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  
  # Trigger manual para casos especiais
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Tipo de versionamento'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor  
          - major
      target_branch:
        description: 'Branch alvo'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - develop

env:
  NODE_VERSION: '18'

jobs:
  # CI - Sempre executa para validar código
  ci:
    name: 🧪 Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: ✅ Run tests
        run: npm run validate

      - name: 📊 Test summary
        run: |
          echo "✅ All tests passed successfully!"
          echo "📋 Ready for deployment"

  # CD - Apenas para main e develop
  cd:
    name: 🚀 Continuous Deployment  
    runs-on: ubuntu-latest
    needs: ci
    if: |
      (github.ref == 'refs/heads/main' || 
       github.ref == 'refs/heads/develop' ||
       startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: � Determine deployment strategy
        id: strategy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
            echo "🚀 Main branch - Production release"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "type=beta" >> $GITHUB_OUTPUT  
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
            echo "🧪 Develop branch - Beta release"
          elif [[ "${{ github.ref }}" =~ refs/tags/v ]]; then
            echo "type=tag" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
            echo "�️ Tag release - Production"
          else
            echo "type=none" >> $GITHUB_OUTPUT
            echo "❌ No deployment needed"
          fi

      - name: 📋 Read package version
        id: package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $VERSION"

      - name: 🧪 Auto-version for develop (beta)
        if: steps.strategy.outputs.type == 'beta'
        run: |
          CURRENT_VERSION="${{ steps.package.outputs.version }}"
          
          # Se já é beta, apenas incremente
          if [[ "$CURRENT_VERSION" =~ -beta\. ]]; then
            npm version prerelease --preid=beta --no-git-tag-version
          else
            # Se não é beta, torne beta
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            npm version $NEW_VERSION-beta.1 --no-git-tag-version
          fi
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "🧪 New beta version: $NEW_VERSION"

      - name: � Use existing version for main/tags
        if: steps.strategy.outputs.type == 'release' || steps.strategy.outputs.type == 'tag'
        run: |
          VERSION="${{ steps.package.outputs.version }}"
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          echo "🚀 Using version: $VERSION"

      - name: � Commit version update (beta only)
        if: steps.strategy.outputs.type == 'beta'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
          git push origin develop || echo "Push failed, continuing..."

      - name: 🎉 Create GitHub Release (main only)
        if: steps.strategy.outputs.type == 'release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: 🚀 Release v${{ env.NEW_VERSION }}
          body: |
            ## 🎉 ESLint Config Bruno Azevedo v${{ env.NEW_VERSION }}
            
            ###  Installation:
            ```bash
            npm install -D eslint-config-brunoazevedo@${{ env.NEW_VERSION }}
            ```
            
            ### 🔗 Links:
            - 📖 [Documentation](https://github.com/brunodsazevedo/eslint-config-brunoazevedo#readme)
            - 📦 [npm Package](https://www.npmjs.com/package/eslint-config-brunoazevedo)
          draft: false
          prerelease: false

      - name: 🧪 Create GitHub Pre-release (develop only)  
        if: steps.strategy.outputs.type == 'beta'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: 🧪 Beta v${{ env.NEW_VERSION }}
          body: |
            ## 🧪 ESLint Config Bruno Azevedo v${{ env.NEW_VERSION }} (Beta)
            
            > ⚠️ **Pre-release version for testing**
            
            ###  Installation:
            ```bash
            npm install -D eslint-config-brunoazevedo@beta
            ```
          draft: false
          prerelease: true

      - name: 📦 Publish to npm
        if: steps.strategy.outputs.type != 'none'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "� Publishing to npm with tag: ${{ steps.strategy.outputs.npm_tag }}"
          npm publish --access public --tag ${{ steps.strategy.outputs.npm_tag }}

      - name: 🎊 Success notification
        if: steps.strategy.outputs.type != 'none'
        run: |
          echo "🎉 Successfully published v${{ env.NEW_VERSION }}"
          echo "📦 Install: npm install -D eslint-config-brunoazevedo@${{ steps.strategy.outputs.npm_tag }}"
          echo "🔗 Package: https://www.npmjs.com/package/eslint-config-brunoazevedo"