name: 🚀 Release & Publish

on:
  # Trigger automático quando push na master ou develop
  push:
    branches: [master, develop]
    paths-ignore:
      - 'README*.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
  
  # Trigger manual para controle de versionamento
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Tipo de versionamento'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch   # 1.0.0 -> 1.0.1
          - minor   # 1.0.0 -> 1.1.0
          - major   # 1.0.0 -> 2.0.0
      branch:
        description: 'Branch para release'
        required: true
        default: 'master'
        type: choice
        options:
          - master
          - develop

env:
  NODE_VERSION: '18'

jobs:
  # Job de CI - Testes e validação
  ci:
    name: 🧪 Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: ✅ Run tests
        run: npm run validate

      - name: 📊 Test coverage check
        run: |
          echo "✅ All tests passed successfully!"
          echo "📋 Configuration validation completed"

  # Job de CD - Release e Deploy
  cd:
    name: 🚀 Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏷️ Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📈 Determine version type
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            BRANCH="${{ github.event.inputs.branch }}"
          else
            VERSION_TYPE="patch"
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          echo "🎯 Version type: $VERSION_TYPE"
          echo "🌿 Branch: $BRANCH"

      - name: 🏷️ Bump version (Master - Release)
        if: steps.version.outputs.branch == 'master'
        run: |
          # Atualizar versão principal
          npm version ${{ steps.version.outputs.type }} --no-git-tag-version
          
          # Obter nova versão
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          echo "🎉 New release version: $NEW_VERSION"

      - name: 🏷️ Bump version (Develop - Beta)
        if: steps.version.outputs.branch == 'develop'
        run: |
          # Obter versão atual
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Remover sufixo beta se existir
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-beta\.[0-9]*$//')
          
          # Incrementar versão base
          npm version ${{ steps.version.outputs.type }} --no-git-tag-version
          
          # Obter nova versão base
          BASE_NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Adicionar sufixo beta
          BETA_VERSION="$BASE_NEW_VERSION-beta.1"
          
          # Verificar se já existe uma versão beta e incrementar
          if npm view eslint-config-brunoazevedo@$BETA_VERSION > /dev/null 2>&1; then
            BETA_COUNT=1
            while npm view eslint-config-brunoazevedo@$BASE_NEW_VERSION-beta.$((BETA_COUNT + 1)) > /dev/null 2>&1; do
              BETA_COUNT=$((BETA_COUNT + 1))
            done
            BETA_VERSION="$BASE_NEW_VERSION-beta.$((BETA_COUNT + 1))"
          fi
          
          # Definir versão beta
          npm version $BETA_VERSION --no-git-tag-version
          echo "NEW_VERSION=$BETA_VERSION" >> $GITHUB_ENV
          
          echo "🧪 New beta version: $BETA_VERSION"

      - name: 📝 Update package.json in repository
        run: |
          git add package.json
          git commit -m "🔖 Release version ${{ env.NEW_VERSION }}"
          git push origin ${{ steps.version.outputs.branch }}

      - name: 🏷️ Create Git tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: 📋 Generate changelog
        id: changelog
        run: |
          if [ "${{ steps.version.outputs.branch }}" = "master" ]; then
            # Changelog para release
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD 2>/dev/null || git log --oneline --pretty=format:"- %s" HEAD~5..HEAD)
          else
            # Changelog para beta
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" HEAD~3..HEAD)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release (Master)
        if: steps.version.outputs.branch == 'master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: 🚀 Release v${{ env.NEW_VERSION }}
          body: |
            ## 🎉 ESLint Config Bruno Azevedo v${{ env.NEW_VERSION }}
            
            ### 📋 Changes in this release:
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 📦 Installation:
            ```bash
            npm install -D eslint-config-brunoazevedo@${{ env.NEW_VERSION }}
            ```
            
            ### 🔗 Links:
            - 📖 [Documentation](https://github.com/brunodsazevedo/eslint-config-brunoazevedo#readme)
            - 📦 [npm Package](https://www.npmjs.com/package/eslint-config-brunoazevedo)
            - 🐛 [Report Issues](https://github.com/brunodsazevedo/eslint-config-brunoazevedo/issues)
          draft: false
          prerelease: false

      - name: 🧪 Create GitHub Pre-release (Develop)
        if: steps.version.outputs.branch == 'develop'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: 🧪 Beta v${{ env.NEW_VERSION }}
          body: |
            ## 🧪 ESLint Config Bruno Azevedo v${{ env.NEW_VERSION }} (Beta)
            
            > ⚠️ **This is a pre-release version for testing purposes**
            
            ### 📋 Changes in this beta:
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 📦 Installation:
            ```bash
            npm install -D eslint-config-brunoazevedo@${{ env.NEW_VERSION }}
            ```
            
            ### 🔗 Links:
            - 📖 [Documentation](https://github.com/brunodsazevedo/eslint-config-brunoazevedo#readme)
            - 📦 [npm Package](https://www.npmjs.com/package/eslint-config-brunoazevedo)
            - 🐛 [Report Issues](https://github.com/brunodsazevedo/eslint-config-brunoazevedo/issues)
          draft: false
          prerelease: true

      - name: 📦 Publish to npm (Release)
        if: steps.version.outputs.branch == 'master'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing release version to npm..."
          npm publish --access public

      - name: 📦 Publish to npm (Beta)
        if: steps.version.outputs.branch == 'develop'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🧪 Publishing beta version to npm..."
          npm publish --access public --tag beta

      - name: 🎊 Success notification
        run: |
          if [ "${{ steps.version.outputs.branch }}" = "master" ]; then
            echo "🎉 Successfully released v${{ env.NEW_VERSION }} to npm!"
            echo "📦 Install: npm install -D eslint-config-brunoazevedo@${{ env.NEW_VERSION }}"
          else
            echo "🧪 Successfully published beta v${{ env.NEW_VERSION }} to npm!"
            echo "📦 Install: npm install -D eslint-config-brunoazevedo@${{ env.NEW_VERSION }}"
            echo "🏷️  Or use: npm install -D eslint-config-brunoazevedo@beta"
          fi